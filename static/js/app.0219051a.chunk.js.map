{"version":3,"sources":["constants.js","device_mdl.js","data_provider.js","App.js","index.js"],"names":["MQTT_MAP","SystemLog","display","resetReason","espFwRevision","TiFwRevision","wifiRxSignaldB","heartBeat","dropboxId","serviceMode","timeZone","maxTmrBackoff","siteName","installLocation","waterSource","siteNotes","pipeType","transmitFrequency","numOfExcitationPulses","gainControl","envelopeCrossingThreshold","startADCsamplingCount","sampleSize","attenEnabled","devices","Device","id","this","status","events","system","metadata","params","sysProp","msg","CONST","metaProp","paramProp","eventTypePathArr","eventType","join","push","type","data","JSON","parse","console","log","e","message","topic","elms","split","subtopic","updateSystemProp","updateMetadataProp","updateParamProp","updateEventProp","slice","s","t","length","devStr","startsWith","devIdStr","extractDeviceString","MQTT_CNX","mqtt","connect","notify_tmo","callbacks","on","device","getDeviceForTopic","updateFromRx","toString","clearTimeout","setTimeout","notify","getDevices","i","subscribe","cb","err","arg2","debug","warn","alert","screenWidth","Dimensions","get","width","chartConfig","backgroundGradientFrom","backgroundGradientTo","decimalPlaces","color","opacity","strokeWidth","barPercentage","useShadowColorFromDataset","getChartWidth","ConnectedDisconnected","useState","connected","setConnected","disconnected","setDisconnected","handleNewData","connectedDevs","disconnDevs","d","useEffect","DataProv","labels","datasets","colors","View","style","styles","chartWrap","Text","header","marginVertical","borderRadius","height","yAxisInterval","segments","yLabelsOffset","withCustomBarColorFromData","flatColor","fromZero","withInnerLines","showValuesOnTopOfBars","VersionPieChart","props","versionCounts","setversionCounts","versionProp","chartTitle","processor","counts","thisVers","colorMap","countsArr","Object","keys","map","vers","idx","name","count","legendFontColor","legendFontSize","chartContainer","backgroundColor","accessor","absolute","SideBySideOrStacked","flexDirection","children","Dashboard","flex","margin","alignItems","StyleSheet","create","container","marginHorizontal","marginBottom","padding","textAlign","fontSize","registerRootComponent","SafeAreaView","StatusBar","ScrollView"],"mappings":"mTAKaA,EAMD,CACJC,UAAW,CACPC,QAAS,YAEbC,YAAa,CACTD,QAAS,gBAEbE,cAAe,CACXF,QAAS,wBAEbG,aAAc,CACVH,QAAS,wBAEbI,eAAgB,CACZJ,QAAS,eAEbK,UAAW,CACPL,QAAS,kBAEbM,UAAW,CACPN,QAAS,oBAEbO,YAAa,CACTP,QAAS,qBAEbQ,SAAU,CACNR,QAAS,YAEbS,cAAe,CACXT,QAAS,oBAnCRF,EAsCC,CACNY,SAAU,CACNV,QAAS,aAEbW,gBAAiB,CACbX,QAAS,oBAEbY,YAAa,CACTZ,QAAS,aAEba,UAAW,CACPb,QAAS,cAEbc,SAAU,CACNd,QAAS,cApDRF,EAuDD,CACJiB,kBAAmB,CACff,QAAS,aAEbgB,sBAAuB,CACnBhB,QAAS,eAEbiB,YAAa,CACTjB,QAAS,QAEbkB,0BAA2B,CACvBlB,QAAS,sBAEbmB,sBAAuB,CACnBnB,QAAS,mBAEboB,WAAY,CACRpB,QAAS,eAEb,eAAgB,CACZA,QAAS,kBAEbqB,aAAc,CACVrB,QAAS,eAEbc,SAAU,CACNd,QAAS,c,kCCpFjBsB,EAAU,GAEOC,E,WAEjB,WAAYC,GAAK,YACbC,KAAKD,GAAKA,EACVC,KAAKC,OAAS,KACdD,KAAKE,OAAS,GACdF,KAAKG,OAAS,GACdH,KAAKI,SAAW,GAChBJ,KAAKK,OAAS,G,4CAOlB,SAAiBC,EAASC,GACmB,MAArCC,EAAyBF,KAM7BN,KAAKG,OAAOG,GAAWC,K,gCAG3B,SAAmBE,EAAUF,GACmB,MAAxCC,EAA2BC,KAM/BT,KAAKI,SAASK,GAAYF,K,6BAG9B,SAAgBG,EAAWH,GACoB,MAAvCC,EAAyBE,KAM7BV,KAAKK,OAAOK,GAAaH,K,6BAG7B,SAAgBI,EAAkBJ,GAC9B,IAAIK,EAAYD,EAAiBE,KAAK,KAEtCb,KAAKE,OAAOY,KAAK,CAACC,KAAMH,EAAWI,KAAMT,IAEzC,IAAIS,EAAO,KAGX,IAGI,GAAY,OAFZA,EAAOC,KAAKC,MAAMX,IAId,YADAY,QAAQC,IAAI,sCAAuCb,EAAKc,EAAEC,SAGhE,MAAOD,GAEL,YADAF,QAAQC,IAAI,sCAAuCb,EAAKc,EAAEC,SAI7C,UAAbV,IACsB,MAAlBI,EAAI,OACJhB,KAAKC,OAASe,EAAKf,OACW,MAAvBe,EAAK,eACZhB,KAAKG,OAAO1B,cAAgBuC,EAAK,eACJ,MAAtBA,EAAK,gBACZhB,KAAKG,OAAOzB,aAAesC,EAAK,kB,0BAK5C,SAAaO,EAAOhB,GAChB,IAAIiB,EAAOD,EAAME,MAAM,KAEnBC,EAAWF,EAAK,GAEJ,UAAZE,EACA1B,KAAK2B,iBAAiBH,EAAK,GAAIjB,GACZ,YAAZmB,EACP1B,KAAK4B,mBAAmBJ,EAAK,GAAIjB,GACd,UAAZmB,EACP1B,KAAK6B,gBAAgBL,EAAK,GAAIjB,GACX,UAAZmB,GACP1B,KAAK8B,gBAAgBN,EAAKO,MAAM,GAAIxB,K,sBAI5C,WACI,IAAIyB,EAAI,CAAC,4CAMT,IAAK,IAAIC,KALTD,EAAElB,KAAKd,KAAKD,IACZiC,EAAElB,KAAK,4CACPkB,EAAElB,KAAK,WAAad,KAAKC,QAEzB+B,EAAElB,KAAK,6BACOd,KAAKG,OACf6B,EAAElB,KAAKmB,EAAI,KAAOjC,KAAKG,OAAO8B,IAIlC,IAAK,IAAIA,KADTD,EAAElB,KAAK,oBACOd,KAAKI,SACf4B,EAAElB,KAAKmB,EAAI,KAAOjC,KAAKI,SAAS6B,IAIpC,IAAK,IAAIA,KADTD,EAAElB,KAAK,6BACOd,KAAKK,OACf2B,EAAElB,KAAKmB,EAAI,KAAOjC,KAAKK,OAAO4B,IAGlC,OAAOD,EAAEnB,KAAK,S,kCAGlB,SAA2BU,GACvB,IAAIC,EAAOD,EAAME,MAAM,KAEvB,GAAID,EAAKU,QAAU,EACf,OAAO,KAGX,IAAIC,EAASX,EAAK,GAElB,OAAKW,EAAOC,WAAW,OAA0B,GAAjBD,EAAOD,OAKhCC,EAHI,O,+BAMf,SAAyBZ,GACrB,IAAIc,EAAWvC,EAAOwC,oBAAoBf,GAE1C,OAAKc,GAIoB,MAArBxC,EAAQwC,KAMZxC,EAAQwC,GAAY,IAAIvC,EAAOuC,IAJpBxC,EAAQwC,IALR,O,wBAcf,WACI,OAAOxC,M,KCvJT0C,EAAWC,IAAKC,QFJpB,mEEKEC,EAAa,KAObC,EAAY,GAEKJ,EAASK,GAAG,WAmCjC,SAAqBrB,EAAOD,GAIxB,IAAIuB,EAAS/C,EAAOgD,kBAAkBvB,GAEtC,GAAc,MAAVsB,EAEA,OAIJA,EAAOE,aAAaxB,EAAOD,EAAQ0B,YAEnCC,aAAaP,GAGbA,EAAaQ,WAAWC,EAAQ,QAGpC,SAASA,IACL,IAAItD,EAAUC,EAAOsD,aAErBjC,QAAQC,IAAI,cAQZ,IAAK,IAAIiC,EAAI,EAAGA,EAAIV,EAAUT,OAAQmB,IAClCV,EAAUU,GAAGxD,GAKd,SAASyD,EAAUC,GACtBZ,EAAU7B,KAAKyC,GAvEnBhB,EAASK,GAAG,aAAa,SAACY,EAAKC,GAC3BtC,QAAQuC,MAAM,mBAElBnB,EAASK,GAAG,SAAS,SAACY,EAAKC,GACvBtC,QAAQuC,MAAM,eAElBnB,EAASK,GAAG,cAAc,SAACY,EAAKC,GAC5BtC,QAAQuC,MAAM,oBAElBnB,EAASK,GAAG,WAAW,SAACY,EAAKC,GACzBtC,QAAQuC,MAAM,iBAElBnB,EAASK,GAAG,SAAS,SAACY,EAAKC,GACvBtC,QAAQuC,MAAM,eAElBnB,EAASK,GAAG,OAAO,SAACY,EAAKC,GACrBtC,QAAQuC,MAAM,aAGlBnB,EAASK,GAAG,WAAW,SAACY,EAAKC,GACzBtC,QAAQC,IAAI,4BAEZmB,EAASe,UAAU9C,2BAA8B,SAAAgD,GACxCA,GAGHrC,QAAQwC,KAAK,uBACbC,MAAM,uCAAwCJ,IAH9CrC,QAAQuC,MAAM,8BC1BxB,IAAMG,EAAcC,IAAWC,IAAI,UAAUC,MAEvCC,EAAc,CAChBC,uBAAwB,UACxBC,qBAAsB,UACtBC,cAAe,EACfC,MAAO,eAACC,EAAD,uDAAW,EAAX,0BAAqCA,EAArC,KACPC,YAAa,EACbC,cAAe,GACfC,2BAA2B,GAGzBC,EAAgB,WAClB,OAAIb,EAAc,IACPA,EAAc,EAEdA,EAAc,KAI7B,SAASc,IACL,MAAkCC,mBAAS,IAA3C,WAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCF,mBAAS,IAAjD,WAAOG,EAAP,KAAqBC,EAArB,KAEMC,EAAgB,SAACpF,GACnB,IAAIqF,EAAgB,GAChBC,EAAc,GAClB,IAAK,IAAIC,KAAKvF,EACe,IAArBA,EAAQuF,GAAGnF,OACXiF,EAAcpE,KAAKsE,GAEnBD,EAAYrE,KAAKsE,GAIzBN,EAAaI,GACbF,EAAgBG,IAGpBE,qBAAU,WAENC,EAAmBL,KACpB,IAGH,IAAIjE,EAAO,CACPuE,OAAQ,CAAC,YAAa,gBACtBC,SAAU,CACN,CACIxE,KAAM,CAAC6D,EAAU3C,OAAQ6C,EAAa7C,QACtCuD,OAAQ,CAAC,iBAAM,SAAS,iBAAM,WAK1C,OACI,kBAACC,EAAA,EAAD,CAAMC,MAAOC,EAAOC,WAChB,kBAACC,EAAA,EAAD,CAAMH,MAAOC,EAAOG,QAApB,qBACA,kBAAC,IAAD,CACIJ,MAAO,CACHK,eAAgB,EAChBC,aAAc,IAGlBjF,KAAMA,EACNgD,MAAOU,IACPwB,OAAQ,IACRjC,YAAaA,EACbkC,cAAe,GACfC,SAAU,EACVC,cAAe,GACfC,4BAA0B,EAC1BC,WAAS,EACTC,UAAQ,EACRC,gBAAc,EACdC,uBAAqB,KAMrC,SAASC,EAAgBC,GACrB,MAA0ChC,mBAAS,IAAnD,WAAOiC,EAAP,KAAsBC,EAAtB,KAEIC,EAAc,GACdC,EAAa,GACM,OAAnBJ,EAAMK,WACNF,EAAc,gBACdC,EAAa,mBAEbD,EAAc,eACdC,EAAa,mBAGjB,IAAM/B,EAAgB,SAACpF,GACnB,IAAIqH,EAAS,GAKb,IAAK,IAAI9B,KAAKvF,EAAS,CACnB,IAAIsH,EAAWtH,EAAQuF,GAAGjF,OAAO4G,GAQT,MAApBG,EAHAC,EAHCA,EAGU,MAAQA,EAFR,aAMXD,EAAOC,GAAY,EAEnBD,EAAOC,IAAa,EAI5B,IAAIC,EAAW,CAAC,OAAQ,MAAO,OAAQ,QAAS,SAAU,QAEtDC,EAAYC,OAAOC,KAAKL,GAAQM,KAAI,SAACC,EAAMC,GAC3C,MAAO,CACHC,KAAMF,EACNG,MAAOV,EAAOO,GACdpD,MAAO+C,EAASM,GAChBG,gBAAiB,UACjBC,eAAgB,OAIxBhB,EAAiBO,IAQrB,OALAhC,qBAAU,WAENC,EAAmBL,KACpB,IAGC,kBAACS,EAAA,EAAD,CAAMC,MAAO,CAACC,EAAOmC,iBACjB,kBAACjC,EAAA,EAAD,CAAMH,MAAOC,EAAOG,QAASiB,GAC7B,kBAACtB,EAAA,EAAD,CAAMC,MAAO,CAACC,EAAOC,UAAW,CAACmC,gBAAiB,aAC9C,kBAAC,IAAD,CACIC,SAAS,QACTjH,KAAM6F,EACN7C,MAAOU,IACPwB,OAAQ,IACRjC,YAAaA,EACb+D,gBAAiB,YACjB1B,4BAA0B,EAC1BC,WAAS,EACT2B,UAAQ,MAO5B,SAASC,EAAoBvB,GACzB,OAAI/C,EAAc,IAEV,kBAAC6B,EAAA,EAAD,CAAMC,MAAO,CAACyC,cAAe,QACxBxB,EAAMyB,UAKRzB,EAAMyB,SAKrB,SAASC,IACL,OACI,kBAAC5C,EAAA,EAAD,CAAMC,MAAO,CAAC4C,KAAM,EAAGC,OAAQ,EAAGC,WAAY,WAC1C,kBAAC9D,EAAD,MACA,kBAACwD,EAAD,KACI,kBAACxB,EAAD,CAAiBM,UAAU,QAC3B,kBAACN,EAAD,CAAiBM,UAAU,UAkB3C,IAAMrB,EAAS8C,IAAWC,OAAO,CAC/BC,UAAW,CACTL,KAAM,EACNP,gBAAiB,SAInBD,eAAgB,CACdc,iBAAkB,GAClBC,aAAc,IAEhBjD,UAAW,CACTkD,QAAS,GACT9C,aAAc,IAEhBF,OAAQ,CACNiD,UAAW,SACXC,SAAU,GACVF,QAAS,MC3NbG,aD6Le,WACb,OACE,kBAACC,EAAA,EAAD,CAAcxD,MAAOC,EAAOgD,WAC1B,kBAAC9C,EAAA,EAAD,yBACA,kBAACsD,EAAA,EAAD,CAAWzD,MAAM,SACjB,kBAAC0D,EAAA,EAAD,KACI,kBAACf,EAAD,a","file":"static/js/app.0219051a.chunk.js","sourcesContent":["export const BROKER =\n  'wss://dizzofac:Qbz5ly_pY0MS@stellar-lifeguard.cloudmqtt.com:443';\n\nexport const MQTT_MAIN_TOPIC = \"/AWACS_ADC_vAf5hLnp6J\"\n\nexport const MQTT_MAP = {\n    events: {\n        status: {\n            display: \"Last Status\"\n        }\n    },\n    system: {\n        SystemLog: {\n            display: \"Last Log\"\n        },\n        resetReason: {\n            display: \"Reset Reason\"\n        },\n        espFwRevision: {\n            display: \"ESP Firmware Version\"\n        },\n        TiFwRevision: {\n            display: \"MSP Firmware Version\"\n        },\n        wifiRxSignaldB: {\n            display: \"Wifi Signal\"\n        },\n        heartBeat: {\n            display: \"Last Heartbeat\"\n        },\n        dropboxId: {\n            display: \"Dropbox Instance\"\n        },\n        serviceMode: {\n            display: \"Service Mode Flag\"\n        },\n        timeZone: {\n            display: \"Timezone\"\n        },\n        maxTmrBackoff: {\n            display: \"Max TMR Backoff\"\n        },\n    },\n    metadata: {\n        siteName: {\n            display: \"Site Name\"\n        },\n        installLocation: {\n            display: \"Install Location\"\n        },\n        waterSource: {\n            display: \"Municipal\"\n        },\n        siteNotes: {\n            display: \"Site Notes\"\n        },\n        pipeType: {\n            display: \"Pipe Type\"\n        },\n    },\n    params: {\n        transmitFrequency: {\n            display: \"Frequency\"\n        },\n        numOfExcitationPulses: {\n            display: \"Pulse Count\"\n        },\n        gainControl: {\n            display: \"Gain\"\n        },\n        envelopeCrossingThreshold: {\n            display: \"Envelope Threshold\"\n        },\n        startADCsamplingCount: {\n            display: \"Start ADC Count\"\n        },\n        sampleSize: {\n            display: \"Window Size\"\n        },\n        \"3V3TxVoltage\": {\n            display: \"3V3 TX Voltage\"\n        },\n        attenEnabled: {\n            display: \"Attenuation\"\n        },\n        pipeType: {\n            display: \"Pipe Type\"\n        },\n    }\n};","import * as CONST from \"./constants\";\n\nlet devices = {};\n\nexport default class Device {\n\n    constructor(id) {\n        this.id = id;\n        this.status = null;\n        this.events = [];\n        this.system = {};\n        this.metadata = {};\n        this.params = {};\n    }\n\n    // constructor(rawObj) {\n    //     rawObj && Object.assign(this, rawObj);\n    // }\n\n    updateSystemProp(sysProp, msg) {\n        if (CONST.MQTT_MAP[\"system\"][sysProp] == null) {\n            // invalid system property. ignore\n            // console.log(\"invalid system property: \", sysProp);\n            return;\n        }\n\n        this.system[sysProp] = msg;\n    }\n\n    updateMetadataProp(metaProp, msg) {\n        if (CONST.MQTT_MAP[\"metadata\"][metaProp] == null) {\n            // invalid system property. ignore\n            // console.log(\"invalid metadata property: \", metaProp);\n            return;\n        }\n\n        this.metadata[metaProp] = msg;\n    }\n\n    updateParamProp(paramProp, msg) {\n        if (CONST.MQTT_MAP[\"params\"][paramProp] == null) {\n            // invalid system property. ignore\n            // console.log(\"invalid params property: \", paramProp);\n            return;\n        }\n\n        this.params[paramProp] = msg;\n    }\n\n    updateEventProp(eventTypePathArr, msg) {\n        let eventType = eventTypePathArr.join(\".\");\n\n        this.events.push({type: eventType, data: msg});\n\n        let data = null;\n\n        // parse message as json\n        try {\n            data = JSON.parse(msg);\n\n            if (data == null) {\n                console.log(\"Failed to parse event msg as json: \", msg, e.message);\n                return;\n            }\n        } catch (e) {\n            console.log(\"Failed to parse event msg as json: \", msg, e.message);\n            return;\n        }\n\n        if (eventType == \"status\") {\n            if (data[\"status\"] != null) {\n                this.status = data.status;\n            } else if (data[\"esp version\"] != null) {\n                this.system.espFwRevision = data[\"esp version\"];\n            } else if (data[\"TI version\"] != null) {\n                this.system.TiFwRevision = data[\"TI version\"];\n            }\n        }\n    }\n\n    updateFromRx(topic, msg) {\n        let elms = topic.split(\"/\");\n        \n        let subtopic = elms[3];\n\n        if (subtopic == \"system\") {\n            this.updateSystemProp(elms[4], msg);\n        } else if (subtopic == \"metadata\") {\n            this.updateMetadataProp(elms[4], msg);\n        } else if (subtopic == \"params\") {\n            this.updateParamProp(elms[4], msg);\n        } else if (subtopic == \"events\") {\n            this.updateEventProp(elms.slice(4), msg);\n        }\n    }\n\n    toString() {\n        let s = [\"----------------------------------------\"];\n        s.push(this.id);\n        s.push(\"----------------------------------------\");\n        s.push(\"Status: \" + this.status);\n\n        s.push(\"----System Properties----\");\n        for (let t in this.system) {\n            s.push(t + \": \" + this.system[t]);\n        }\n\n        s.push(\"----Metadata----\");\n        for (let t in this.metadata) {\n            s.push(t + \": \" + this.metadata[t]);\n        }\n\n        s.push(\"----Sensor Parameters----\");\n        for (let t in this.params) {\n            s.push(t + \": \" + this.params[t]);\n        }\n\n        return s.join(\"\\n\");\n    }\n\n    static extractDeviceString(topic) {\n        let elms = topic.split(\"/\");\n\n        if (elms.length <= 3) {\n            return null;\n        }\n\n        let devStr = elms[2];\n\n        if (!devStr.startsWith(\"AW\") || devStr.length != 6)\n        {\n            return null;\n        }\n\n        return devStr;\n    }\n\n    static getDeviceForTopic(topic) {\n        let devIdStr = Device.extractDeviceString(topic);\n\n        if (!devIdStr) {\n            return null;\n        }\n\n        if (devices[devIdStr] != null) {\n            // return existing device for this device string\n            return devices[devIdStr];\n        }\n\n        // device not found yet. Create it and add it to our data store.\n        devices[devIdStr] = new Device(devIdStr);\n\n        return devices[devIdStr];\n    }\n\n    static getDevices() {\n        return devices;\n    }\n}\n","import mqtt from '@taoqf/react-native-mqtt';\n\nimport * as CONST from './constants';\nimport Device from \"./device_mdl\";\n\nconst MQTT_CNX = mqtt.connect(CONST.BROKER);\nvar notify_tmo = null;\n\nvar admin_data = {\n    connected: [],\n    disconnected: [],\n};\n\nlet callbacks = [];\n\nconst _msgListener = MQTT_CNX.on('message', onMessageRx);\n\nMQTT_CNX.on('reconnect', (err, arg2) => {\n    console.debug('on reconnect');\n});\nMQTT_CNX.on('close', (err, arg2) => {\n    console.debug('on close');\n});\nMQTT_CNX.on('disconnect', (err, arg2) => {\n    console.debug('on disconnect');\n});\nMQTT_CNX.on('offline', (err, arg2) => {\n    console.debug('on offline');\n});\nMQTT_CNX.on('error', (err, arg2) => {\n    console.debug('on error');\n});\nMQTT_CNX.on('end', (err, arg2) => {\n    console.debug('on end');\n});\n\nMQTT_CNX.on('connect', (err, arg2) => {\n    console.log(\"connected to MQTT broker\");\n\n    MQTT_CNX.subscribe(CONST.MQTT_MAIN_TOPIC + \"/#\", err => {\n        if (!err) {\n          console.debug(\"Subscribe successful\");\n        } else {\n          console.warn('Failed to subscribe');\n          alert('ERROR: Unable to reach MQTT Server: ', err);\n        }\n      }\n    );\n});\n\nfunction onMessageRx(topic, message) {\n    // console.log(\"RX: \", topic, message.toString());\n\n    // get the device, or create it\n    let device = Device.getDeviceForTopic(topic);\n\n    if (device == null) {\n        // no valid device found in topic string\n        return;\n    }\n\n    // set new data\n    device.updateFromRx(topic, message.toString());\n\n    clearTimeout(notify_tmo);\n\n    // notify UI via callback\n    notify_tmo = setTimeout(notify, 200);\n}\n\nfunction notify() {\n    let devices = Device.getDevices();\n\n    console.log(\"Notifying!\");\n\n    // console.log(`Printing devices (${Object.keys(devices).length})`);\n    // for (let id in devices) {\n    //     const d = devices[id];\n    //     console.log(d.toString() + \"\\n\");\n    // }\n\n    for (let i = 0; i < callbacks.length; i++) {\n        callbacks[i](devices);\n    }\n\n}\n\nexport function subscribe(cb) {\n    callbacks.push(cb);\n}\n\n\n","import { StatusBar } from 'expo-status-bar';\nimport React, {useState, useEffect} from 'react';\nimport { StyleSheet, Text, View, TextInput, ScrollView, SafeAreaView, Dimensions } from 'react-native';\n\nimport {\n    LineChart,\n    BarChart,\n    PieChart,\n    ProgressChart,\n    ContributionGraph,\n    StackedBarChart,\n  } from 'react-native-chart-kit';\n\nimport * as DataProv from \"./data_provider\";\n\nconst screenWidth = Dimensions.get(\"window\").width;\n\nconst chartConfig = {\n    backgroundGradientFrom: '#eff3ff',\n    backgroundGradientTo: '#efefef',\n    decimalPlaces: 0,\n    color: (opacity = 1) => `rgba(80, 80, 80, ${opacity})`,\n    strokeWidth: 0, // optional, default 3\n    barPercentage: 0.8,\n    useShadowColorFromDataset: false // optional\n};\n\nconst getChartWidth = () => {\n    if (screenWidth > 400) {\n        return screenWidth / 3;\n    } else {\n        return screenWidth / 1.5;\n    }\n};\n\nfunction ConnectedDisconnected() {\n    const [connected, setConnected] = useState([]);\n    const [disconnected, setDisconnected] = useState([]);\n\n    const handleNewData = (devices) => {\n        let connectedDevs = [];\n        let disconnDevs = [];\n        for (let d in devices) {\n            if (devices[d].status != 99) {\n                connectedDevs.push(d);\n            } else {\n                disconnDevs.push(d);\n            }\n        }\n\n        setConnected(connectedDevs);\n        setDisconnected(disconnDevs);\n    };\n\n    useEffect(() => {\n        // subscribe to our data provider\n        DataProv.subscribe(handleNewData);\n    }, [])\n\n\n    let data = {\n        labels: [\"Connected\", \"Disconnected\"],\n        datasets: [\n            {\n                data: [connected.length, disconnected.length],\n                colors: [() => \"green\", () => \"red\"]\n            }\n        ]\n    };\n\n    return (\n        <View style={styles.chartWrap}>\n            <Text style={styles.header}>Connection Status</Text>\n            <BarChart\n                style={{\n                    marginVertical: 8,\n                    borderRadius: 16,\n                }}\n                \n                data={data}\n                width={getChartWidth()}\n                height={200}\n                chartConfig={chartConfig}\n                yAxisInterval={10}\n                segments={3}\n                yLabelsOffset={35}\n                withCustomBarColorFromData\n                flatColor\n                fromZero\n                withInnerLines\n                showValuesOnTopOfBars\n            />\n        </View>\n    );\n}\n\nfunction VersionPieChart(props) {\n    const [versionCounts, setversionCounts] = useState([]);\n\n    let versionProp = \"\";\n    let chartTitle = \"\";\n    if (props.processor == \"ESP\") {\n        versionProp = \"espFwRevision\";\n        chartTitle = \"ESP32 Firmware\";\n    } else {\n        versionProp = \"TiFwRevision\";\n        chartTitle = \"MSP430 Firmware\";\n    }\n\n    const handleNewData = (devices) => {\n        let counts = {};\n\n\n\n\n        for (let d in devices) {\n            let thisVers = devices[d].system[versionProp];\n\n            if (!thisVers) {\n                thisVers = \"  Unknown\";\n            } else {\n                thisVers = \"  v\" + thisVers;\n            }\n\n            if (counts[thisVers] == null) {\n                counts[thisVers] = 1;\n            } else {\n                counts[thisVers] += 1;\n            }\n        }\n\n        let colorMap = [\"gray\", \"red\", \"blue\", \"green\", \"yellow\", \"cyan\"]\n\n        let countsArr = Object.keys(counts).map((vers, idx) => {\n            return {\n                name: vers,\n                count: counts[vers],\n                color: colorMap[idx],\n                legendFontColor: '#7F7F7F',\n                legendFontSize: 15,\n            };\n        })\n\n        setversionCounts(countsArr);\n    };\n\n    useEffect(() => {\n        // subscribe to our data provider\n        DataProv.subscribe(handleNewData);\n    }, [])\n\n    return (\n        <View style={[styles.chartContainer]}>\n            <Text style={styles.header}>{chartTitle}</Text>\n            <View style={[styles.chartWrap, {backgroundColor: \"#eff3ff\"}]}>\n                <PieChart\n                    accessor=\"count\"\n                    data={versionCounts}\n                    width={getChartWidth()}\n                    height={150}\n                    chartConfig={chartConfig}\n                    backgroundColor={\"#FFFFFF00\"}\n                    withCustomBarColorFromData\n                    flatColor\n                    absolute\n                />\n            </View>\n        </View>\n    );\n}\n\nfunction SideBySideOrStacked(props) {\n    if (screenWidth > 400) {\n        return (\n            <View style={{flexDirection: \"row\"}}>\n                {props.children}\n            </View>\n        )\n    }\n    else {\n        return props.children;\n    }\n}\n\n\nfunction Dashboard() {\n    return (\n        <View style={{flex: 1, margin: 8, alignItems: \"center\"}}>\n            <ConnectedDisconnected/>\n            <SideBySideOrStacked>\n                <VersionPieChart processor=\"ESP\"/>\n                <VersionPieChart processor=\"MSP\"/>\n            </SideBySideOrStacked>\n        </View>\n    );\n}\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      <Text>Demo AWACS Admin</Text>\n      <StatusBar style=\"auto\" />\n      <ScrollView>\n          <Dashboard/>\n      </ScrollView>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'white',\n    // alignItems: 'center',\n    // justifyContent: 'center',\n  },\n  chartContainer: {\n    marginHorizontal: 25,\n    marginBottom: 25,\n  },\n  chartWrap: {\n    padding: 10,\n    borderRadius: 20\n  },\n  header: {\n    textAlign: 'center',\n    fontSize: 18,\n    padding: 16,\n  },\n});\n","import 'react-native-gesture-handler';\nimport { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}